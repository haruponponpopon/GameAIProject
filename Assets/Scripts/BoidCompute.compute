/*
Copyright (c) 2019 Sebastian Lague
Released under the MIT license
https://github.com/SebLague/Boids/blob/master/LICENSE
*/
//compute shaderを用いて近傍探索計算を高速化する。

#pragma kernel CSMain
static const int threadGroupSize = 1024;

struct Boid {
    float3 position;
    float3 direction;
    int type;

    float3 flockHeading;
    float3 flockCentre;
    float3 separationHeading;
    int numFlockmates;

    float3 enemyHeading;
    float3 enemyCentre;
    int numEnemy;
};
struct Enemy {
    float3 position;
    float3 direction;
};

RWStructuredBuffer<Boid> boids;
RWStructuredBuffer<Enemy> enemies;
int numBoids;
int numEnemies;
float viewRadius;
float avoidRadius;
float viewEnemyRadius;

[numthreads(threadGroupSize,1,1)]   //1024*1*1=1024スレッドを並列に実行
void CSMain (uint3 id : SV_DispatchThreadID)
{
    //タイルアルゴリズム
    // int co = boids[id.x].type;
    // int z = co%100;
    // co /= 100;
    // int y = co%100;
    // co /= 100;
    // int x = co;
    // end
    for (int indexB = 0; indexB < numBoids; indexB ++) {
        if (id.x != indexB) {
            Boid boidB = boids[indexB];
            float3 offset = boidB.position - boids[id.x].position;
            float sqrDst = offset.x * offset.x + offset.y * offset.y + offset.z * offset.z;

            //boids[indexB]が探索範囲内かつ同種族なら、群れの重心と進行方向をアップデートする。
            //boids[indexB]が同種族なら、アップデート
            // if (sqrDst < viewRadius * viewRadius && boidB.type==boids[id.x].type) {
            // if (sqrDst < viewRadius * viewRadius){//original
            if (boidB.type==boids[id.x].type) {//DBSCAN

            // //タイルアルゴリズム
            // bool flag = false;
            // for (int i=max(0,x-1); i<=x+1; i++){
            //     for (int j=max(0,y-1); j<=y+1; j++){
            //         for (int k=max(0,z-1); k<=z+1; k++){
            //             int r = i*10000+j*100+k;
            //             if (r==boidB.type)flag = true;
            //         }
            //     }
            // }
            // //end

            // if (flag){//tile
                boids[id.x].numFlockmates += 1;
                boids[id.x].flockHeading += boidB.direction;
                boids[id.x].flockCentre += boidB.position;

                if (sqrDst < avoidRadius * avoidRadius) {
                    boids[id.x].separationHeading -= offset / sqrDst;
                }
            }
        }
    }
    //敵が近くにいたら、boidに関する重心をアップデート
    for (int indexA = 0; indexA < numEnemies; indexA ++) {
        Enemy enemyA = enemies[indexA];
        float3 offset = enemyA.position - boids[id.x].position;
        float sqrDst = offset.x * offset.x + offset.y * offset.y + offset.z * offset.z;

        //探索範囲内なら
        if (sqrDst < viewEnemyRadius * viewEnemyRadius) {
            boids[id.x].numEnemy += 1;
            boids[id.x].enemyHeading += enemyA.direction;
            boids[id.x].enemyCentre += enemyA.position;
        }
    }
}